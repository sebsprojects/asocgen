########################################
     UNORDERED INSERT generateFrom
########################################

while(filled != prevFilled) {
prevFilled = filled;
for(i = 0; i < filled; i++) {
for(j = 0; j <= i; j++) {
a = *at_uint16(res, i);
b = *at_uint16(res, j);

ele = gop(group, a, b);
ind = indexOf(res, ele, filled);
if(ind == 0xffff) {
filled++;
*at_uint16(res, ind) = ele;
}
ele = gop(group, b, a);
ind = indexOf(res, ele, filled);
if(ind == 0xffff) {
filled++;
*at_uint16(res, ind) = ele;
}
}
}
}

########################################
     BITFIELD INSERT generateFrom
########################################
void generateFrom_noalloc(Group *group, Bitfield *set, Bitfield *res) {
uint16_t n = order(group);
#ifdef BOUNDS_CHECK
if(n != set->bitCount || n != res->bitCount) {
printError("error: generateFrom_noalloc size mismatch");
exit(1);
}
#endif
uint32_t i, j;
for(i = 0; i < n; i++) {
placeBit(res, i, testBit(set, i));
}

uint16_t ind;
uint32_t prevSum = 0;
while(sumBits(res) != prevSum) {
for(i = 0; i < n; i++) {
for(j = 0; j <= i; j++) {
if(testBit(res, i) && testBit(res, j)) {
ind = gopi(group, i, j);
setBit(res, ind);
}
}
}
}
}
